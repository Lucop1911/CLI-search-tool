name: Build and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  create-tag:
    name: Create Version Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.create_tag.outputs.tag }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, or start with v0 if none exist
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "latest=v0" >> $GITHUB_OUTPUT
            echo "No tags found, starting with v0"
          else
            echo "latest=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "Latest tag: $LATEST_TAG"
          fi

      - name: Calculate next version
        id: next_version
        run: |
          LATEST="${{ steps.get_latest_tag.outputs.latest }}"
          # Extract number from version (e.g., v5 -> 5)
          CURRENT_NUM=$(echo $LATEST | sed 's/v//')
          # Increment
          NEXT_NUM=$((CURRENT_NUM + 1))
          NEXT_TAG="v$NEXT_NUM"
          echo "tag=$NEXT_TAG" >> $GITHUB_OUTPUT
          echo "Next version will be: $NEXT_TAG"

      - name: Create and push tag
        id: create_tag
        run: |
          TAG="${{ steps.next_version.outputs.tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a $TAG -m "Release $TAG"
          git push origin $TAG
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Created and pushed tag: $TAG"

  build:
    name: Build on ${{ matrix.os }}
    needs: create-tag
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: search
            asset_name: search-linux-amd64
          - os: macos-latest
            artifact_name: search
            asset_name: search-macos-amd64
          - os: windows-latest
            artifact_name: search.exe
            asset_name: search-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup GCC (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y gcc

      - name: Setup GCC (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install gcc || true

      - name: Setup MinGW (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-gcc

      - name: Build (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          gcc -O2 -o ${{ matrix.artifact_name }} search.c
          chmod +x ${{ matrix.artifact_name }}

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          gcc -O2 -o ${{ matrix.artifact_name }} search.c

      - name: Test executable (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          ./${{ matrix.artifact_name }} -h

      - name: Test executable (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          ./${{ matrix.artifact_name }} -h

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: [create-tag, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure
        run: ls -R ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          cp artifacts/search-linux-amd64/search release/search-linux-amd64
          cp artifacts/search-macos-amd64/search release/search-macos-amd64
          cp artifacts/search-windows-amd64.exe/search.exe release/search-windows-amd64.exe
          chmod +x release/search-linux-amd64
          chmod +x release/search-macos-amd64

      - name: Create checksums
        run: |
          cd release
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-tag.outputs.tag }}
          name: Release ${{ needs.create-tag.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release/search-linux-amd64
            release/search-macos-amd64
            release/search-windows-amd64.exe
            release/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}